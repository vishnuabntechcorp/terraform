pipeline {
agent any
}

//*
(pipeline {
    agent {label 'slave'}    #//#we have any master slave node we need to run in specfic slave node 
    stages {
        ...
    }
}) *//

tools {
jdk 'jdk17'            #//  T configured JDK 17 in the Jenkins global tool configuration.  based on the project tools

}

environment {
SCANNER_HOME = tool 'sonar-scanner'

}
stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'devops', url: 'https://github.com/vishnuabntechcorp/terraform.git'     #//   
            }
        }
stage('Install Package Dependencies') 
{ 
steps
 {
sh "npm install"    for node js projects                                
sh " sh 'pip3 install -r requirements.txt' phython  
          }
}

stage('Unit Tests') 
{ 
steps
 {
sh "npm test"
sh 'python3 -m unittest discover -s tests'
        } 
}

stage('SonarQube') 
{
 steps {                                                                            
withSonarQubeEnv('sonar') 
{
sh "$SCANNER_HOME/bin/sonar-scanner - Dsonar.projectKey=Campground -Dsonar.projectName=Campground"   ///       code qulity                          
        }
   }
}
stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'   #// accept for the apporaval sucessfull the onely it another stage is start 
                }
            }
        }

stage('Docker Build & Tag') { steps {
script {
withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {     #//check the give the proper build  tag name in doc
sh "docker build -t ."
            }
       }
    }
 }
stage('Docker Push Image') { steps {
script {                                                                                                             # //"Based on Org new change , image repositery   
withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker')                                                                                                                                  
 {
sh "docker push "
             }
       }
    }
 }
stage('Docker Deploy To Local are cloud')
 { steps {
script {
withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker')   
 {
sh "docker run -d -p 3000:3000 <name:latest"
                         }
                 }
          }
     }
   }
 }
stage('Deploy To EKS') { steps {
withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'nameeks', contextName: '', credentialsId: 'token name ', namespace: 'name', serverUrl: '']]) {
sh "kubectl apply -f Manifests/" sleep 60   
           }
     } 	
  }

stage('Verify the Deployment') { steps {
withKubeCredentials(kubectlCredentials: [[caCertificate: '', clusterName: 'EKS-5', contextName: '', credentialsId: 'tokenname', namespace: 'webapps', serverUrl: ' ']]) {
sh "kubectl get pods -n webapps" 
sh "kubectl get svc -n webapps"
                   }
              }
          }
     }
  }
-----------------------------------------------------------------------------------------------------------------------------------------------
note : to check the all servies   kubectl get all -o wide  , 
                                                                                                   
we can add the t  build and push  states in to one stage 

stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build -t <name > ."
                       sh " docker tags dockerfile sai3355/abntech:v1.1 â€œ          // docker images  push the docker hub repo 
                       sh " docker push sai3355/abntech:nginx "
                    }
                }
            }
        }
---------------------------------------------------------AWS ECR--------------------------------------------------------------------
stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/backend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
